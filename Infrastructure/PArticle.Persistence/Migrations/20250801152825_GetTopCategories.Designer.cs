// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PArticle.Persistence.Context;

#nullable disable

namespace PArticle.Persistence.Migrations
{
    [DbContext(typeof(ArticleDbContext))]
    [Migration("20250801152825_GetTopCategories")]
    partial class GetTopCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PArticle.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ArticleId", "CategoryId")
                        .IsUnique();

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("ArticleId", "TagId")
                        .IsUnique();

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleViews");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleVotes");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology",
                            Slug = "technology",
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Health",
                            Slug = "health",
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lifestyle",
                            Slug = "lifestyle",
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Education",
                            Slug = "education",
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Travel",
                            Slug = "travel",
                            Status = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Food",
                            Slug = "food",
                            Status = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finance",
                            Slug = "finance",
                            Status = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Entertainment",
                            Slug = "entertainment",
                            Status = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sports",
                            Slug = "sports",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Politics",
                            Slug = "politics",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Business",
                            Slug = "business",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Science",
                            Slug = "science",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Art",
                            Slug = "art",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Fashion",
                            Slug = "fashion",
                            Status = 1
                        });
                });

            modelBuilder.Entity("PArticle.Domain.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MenuType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology",
                            Slug = "technology",
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Health",
                            Slug = "health",
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lifestyle",
                            Slug = "lifestyle",
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Education",
                            Slug = "education",
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Travel",
                            Slug = "travel",
                            Status = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Food",
                            Slug = "food",
                            Status = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finance",
                            Slug = "finance",
                            Status = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Entertainment",
                            Slug = "entertainment",
                            Status = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sports",
                            Slug = "sports",
                            Status = 2
                        });
                });

            modelBuilder.Entity("PArticle.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwArticleCategory", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwArticleCategories", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwArticleStatusCount", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwArticleStatusCount", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwArticleTags", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwArticleView", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalViewCount")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwArticleViews", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwArticleVote", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalVoteCount")
                        .HasColumnType("int");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwArticleVotes", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwCategoryStatusCount", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwCategoryStatusCount", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwMostViewedArticle", b =>
                {
                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("vwMostViewedArticles", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwTagStatusCount", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwTagStatusCount", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwTopRatedArticle", b =>
                {
                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("vwTopRatedArticles", (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Views.VwUserTypeCount", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwUserTypeCount", (string)null);
                });

            modelBuilder.Entity("PArticle.Shared.Models.GetTopTag", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Article", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleCategory", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PArticle.Domain.Entities.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleTag", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PArticle.Domain.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleView", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.Article", "Article")
                        .WithMany("ArticleViews")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.ArticleVote", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.Article", "Article")
                        .WithMany("ArticleVotes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("PArticle.Domain.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategories");

                    b.Navigation("ArticleTags");

                    b.Navigation("ArticleViews");

                    b.Navigation("ArticleVotes");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Category", b =>
                {
                    b.Navigation("ArticleCategories");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("PArticle.Domain.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
